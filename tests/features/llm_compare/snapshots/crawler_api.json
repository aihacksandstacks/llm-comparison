{
  "classes": {
    "Any": {
      "doc": "Special type indicating an unconstrained type.\n\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\n\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks.",
      "methods": {}
    },
    "Path": {
      "doc": "PurePath subclass that can make system calls.\n\nPath represents a filesystem path but unlike PurePath, also offers\nmethods to do system calls on path objects. Depending on your system,\ninstantiating a Path will return either a PosixPath or a WindowsPath\nobject. You can also instantiate a PosixPath or WindowsPath directly,\nbut cannot instantiate a WindowsPath on a POSIX system or vice versa.",
      "methods": {
        "absolute": {
          "doc": "Return an absolute version of this path by prepending the current\nworking directory. No normalization or symlink resolution is performed.\n\nUse resolve() to get the canonical path to a file.",
          "parameters": [
            "self"
          ]
        },
        "as_posix": {
          "doc": "Return the string representation of the path with forward (/)\nslashes.",
          "parameters": [
            "self"
          ]
        },
        "as_uri": {
          "doc": "Return the path as a 'file' URI.",
          "parameters": [
            "self"
          ]
        },
        "chmod": {
          "doc": "Change the permissions of the path, like os.chmod().",
          "parameters": [
            "self",
            "mode",
            "follow_symlinks"
          ]
        },
        "exists": {
          "doc": "Whether this path exists.\n\nThis method normally follows symlinks; to check whether a symlink exists,\nadd the argument follow_symlinks=False.",
          "parameters": [
            "self",
            "follow_symlinks"
          ]
        },
        "expanduser": {
          "doc": "Return a new path with expanded ~ and ~user constructs\n(as returned by os.path.expanduser)",
          "parameters": [
            "self"
          ]
        },
        "glob": {
          "doc": "Iterate over this subtree and yield all existing files (of any\nkind, including directories) matching the given relative pattern.",
          "parameters": [
            "self",
            "pattern",
            "case_sensitive"
          ]
        },
        "group": {
          "doc": "Return the group name of the file gid.",
          "parameters": [
            "self"
          ]
        },
        "hardlink_to": {
          "doc": "Make this path a hard link pointing to the same file as *target*.\n\nNote the order of arguments (self, target) is the reverse of os.link's.",
          "parameters": [
            "self",
            "target"
          ]
        },
        "is_absolute": {
          "doc": "True if the path is absolute (has both a root and, if applicable,\na drive).",
          "parameters": [
            "self"
          ]
        },
        "is_block_device": {
          "doc": "Whether this path is a block device.",
          "parameters": [
            "self"
          ]
        },
        "is_char_device": {
          "doc": "Whether this path is a character device.",
          "parameters": [
            "self"
          ]
        },
        "is_dir": {
          "doc": "Whether this path is a directory.",
          "parameters": [
            "self"
          ]
        },
        "is_fifo": {
          "doc": "Whether this path is a FIFO.",
          "parameters": [
            "self"
          ]
        },
        "is_file": {
          "doc": "Whether this path is a regular file (also True for symlinks pointing\nto regular files).",
          "parameters": [
            "self"
          ]
        },
        "is_junction": {
          "doc": "Whether this path is a junction.",
          "parameters": [
            "self"
          ]
        },
        "is_mount": {
          "doc": "Check if this path is a mount point",
          "parameters": [
            "self"
          ]
        },
        "is_relative_to": {
          "doc": "Return True if the path is relative to another path or False.\n        ",
          "parameters": [
            "self",
            "other",
            "_deprecated"
          ]
        },
        "is_reserved": {
          "doc": "Return True if the path contains one of the special names reserved\nby the system, if any.",
          "parameters": [
            "self"
          ]
        },
        "is_socket": {
          "doc": "Whether this path is a socket.",
          "parameters": [
            "self"
          ]
        },
        "is_symlink": {
          "doc": "Whether this path is a symbolic link.",
          "parameters": [
            "self"
          ]
        },
        "iterdir": {
          "doc": "Yield path objects of the directory contents.\n\nThe children are yielded in arbitrary order, and the\nspecial entries '.' and '..' are not included.",
          "parameters": [
            "self"
          ]
        },
        "joinpath": {
          "doc": "Combine this path with one or several arguments, and return a\nnew path representing either a subpath (if all arguments are relative\npaths) or a totally different path (if one of the arguments is\nanchored).",
          "parameters": [
            "self",
            "pathsegments"
          ]
        },
        "lchmod": {
          "doc": "Like chmod(), except if the path points to a symlink, the symlink's\npermissions are changed, rather than its target's.",
          "parameters": [
            "self",
            "mode"
          ]
        },
        "lstat": {
          "doc": "Like stat(), except if the path points to a symlink, the symlink's\nstatus information is returned, rather than its target's.",
          "parameters": [
            "self"
          ]
        },
        "match": {
          "doc": "Return True if this path matches the given pattern.",
          "parameters": [
            "self",
            "path_pattern",
            "case_sensitive"
          ]
        },
        "mkdir": {
          "doc": "Create a new directory at this given path.",
          "parameters": [
            "self",
            "mode",
            "parents",
            "exist_ok"
          ]
        },
        "open": {
          "doc": "Open the file pointed to by this path and return a file object, as\nthe built-in open() function does.",
          "parameters": [
            "self",
            "mode",
            "buffering",
            "encoding",
            "errors",
            "newline"
          ]
        },
        "owner": {
          "doc": "Return the login name of the file owner.",
          "parameters": [
            "self"
          ]
        },
        "read_bytes": {
          "doc": "Open the file in bytes mode, read it, and close the file.",
          "parameters": [
            "self"
          ]
        },
        "read_text": {
          "doc": "Open the file in text mode, read it, and close the file.",
          "parameters": [
            "self",
            "encoding",
            "errors"
          ]
        },
        "readlink": {
          "doc": "Return the path to which the symbolic link points.",
          "parameters": [
            "self"
          ]
        },
        "relative_to": {
          "doc": "Return the relative path to another path identified by the passed\narguments.  If the operation is not possible (because this is not\nrelated to the other path), raise ValueError.\n\nThe *walk_up* parameter controls whether `..` may be used to resolve\nthe path.",
          "parameters": [
            "self",
            "other",
            "_deprecated",
            "walk_up"
          ]
        },
        "rename": {
          "doc": "Rename this path to the target path.\n\nThe target path may be absolute or relative. Relative paths are\ninterpreted relative to the current working directory, *not* the\ndirectory of the Path object.\n\nReturns the new Path instance pointing to the target path.",
          "parameters": [
            "self",
            "target"
          ]
        },
        "replace": {
          "doc": "Rename this path to the target path, overwriting if that path exists.\n\nThe target path may be absolute or relative. Relative paths are\ninterpreted relative to the current working directory, *not* the\ndirectory of the Path object.\n\nReturns the new Path instance pointing to the target path.",
          "parameters": [
            "self",
            "target"
          ]
        },
        "resolve": {
          "doc": "Make the path absolute, resolving all symlinks on the way and also\nnormalizing it.",
          "parameters": [
            "self",
            "strict"
          ]
        },
        "rglob": {
          "doc": "Recursively yield all existing files (of any kind, including\ndirectories) matching the given relative pattern, anywhere in\nthis subtree.",
          "parameters": [
            "self",
            "pattern",
            "case_sensitive"
          ]
        },
        "rmdir": {
          "doc": "Remove this directory.  The directory must be empty.",
          "parameters": [
            "self"
          ]
        },
        "samefile": {
          "doc": "Return whether other_path is the same or not as this file\n(as returned by os.path.samefile()).",
          "parameters": [
            "self",
            "other_path"
          ]
        },
        "stat": {
          "doc": "Return the result of the stat() system call on this path, like\nos.stat() does.",
          "parameters": [
            "self",
            "follow_symlinks"
          ]
        },
        "symlink_to": {
          "doc": "Make this path a symlink pointing to the target path.\nNote the order of arguments (link, target) is the reverse of os.symlink.",
          "parameters": [
            "self",
            "target",
            "target_is_directory"
          ]
        },
        "touch": {
          "doc": "Create this file with the given access mode, if it doesn't exist.",
          "parameters": [
            "self",
            "mode",
            "exist_ok"
          ]
        },
        "unlink": {
          "doc": "Remove this file or link.\nIf the path is a directory, use rmdir() instead.",
          "parameters": [
            "self",
            "missing_ok"
          ]
        },
        "walk": {
          "doc": "Walk the directory tree from this directory, similar to os.walk().",
          "parameters": [
            "self",
            "top_down",
            "on_error",
            "follow_symlinks"
          ]
        },
        "with_name": {
          "doc": "Return a new path with the file name changed.",
          "parameters": [
            "self",
            "name"
          ]
        },
        "with_segments": {
          "doc": "Construct a new path object from any number of path-like objects.\nSubclasses may override this method to customize how new path objects\nare created from methods like `iterdir()`.",
          "parameters": [
            "self",
            "pathsegments"
          ]
        },
        "with_stem": {
          "doc": "Return a new path with the stem changed.",
          "parameters": [
            "self",
            "stem"
          ]
        },
        "with_suffix": {
          "doc": "Return a new path with the file suffix changed.  If the path\nhas no suffix, add given suffix.  If the given suffix is an empty\nstring, remove the suffix from the path.",
          "parameters": [
            "self",
            "suffix"
          ]
        },
        "write_bytes": {
          "doc": "Open the file in bytes mode, write to it, and close the file.",
          "parameters": [
            "self",
            "data"
          ]
        },
        "write_text": {
          "doc": "Open the file in text mode, write to it, and close the file.",
          "parameters": [
            "self",
            "data",
            "encoding",
            "errors",
            "newline"
          ]
        }
      }
    },
    "WebCrawler": {
      "doc": "Class for crawling websites and processing content for RAG.",
      "methods": {
        "crawl_website": {
          "doc": "Crawl a website and store the content.\n\nArgs:\n    url: URL to crawl.\n    depth: Maximum depth to crawl (default from config).\n    max_pages: Maximum pages to crawl (default from config).\n    output_name: Name for the output files (defaults to domain name).\n    \nReturns:\n    Dictionary with crawl results and metadata.",
          "parameters": [
            "self",
            "url",
            "depth",
            "max_pages",
            "output_name"
          ]
        },
        "load_processed_crawl": {
          "doc": "Load previously processed crawl results.\n\nArgs:\n    output_name: Name of the output file.\n    \nReturns:\n    List of processed pages from the crawl.",
          "parameters": [
            "self",
            "output_name"
          ]
        }
      }
    }
  },
  "constants": {
    "CRAWL4AI_API_KEY": "str",
    "DATA_DIR": "str",
    "Dict": "_SpecialGenericAlias",
    "List": "_SpecialGenericAlias",
    "Optional": "_SpecialForm",
    "Union": "_SpecialForm",
    "asyncio": "module",
    "json": "module",
    "os": "module",
    "time": "module",
    "traceback": "module"
  },
  "functions": {
    "crawl_website": {
      "doc": "Crawl a website synchronously.\n\nArgs:\n    url: URL to crawl.\n    depth: Maximum depth to crawl.\n    max_pages: Maximum pages to crawl.\n    output_name: Name for the output files.\n    \nReturns:\n    Dictionary with crawl results and metadata.",
      "parameters": [
        "url",
        "depth",
        "max_pages",
        "output_name"
      ]
    },
    "get_config": {
      "doc": "Get configuration from the YAML config file.\n\nArgs:\n    section: Optional section name to retrieve. If None, returns the entire config.\n    \nReturns:\n    Dict containing the requested configuration.",
      "parameters": [
        "section"
      ]
    },
    "get_web_crawler": {
      "doc": "Factory function to get a WebCrawler instance.\n\nReturns:\n    WebCrawler instance.",
      "parameters": []
    },
    "simple_http_crawl": {
      "doc": "Simple HTTP crawler that can be called directly.\n\nArgs:\n    url: URL to crawl.\n    \nReturns:\n    List with the crawled page result.",
      "parameters": [
        "url"
      ]
    },
    "simple_http_crawl_sync": {
      "doc": "Simple HTTP crawler that can be called synchronously.\n\nArgs:\n    url: URL to crawl.\n    \nReturns:\n    List with the crawled page result.",
      "parameters": [
        "url"
      ]
    }
  }
}