---
description: 
globs: 
alwaysApply: false
---
# Next.js Project Rules

Best practices and common pitfalls for Next.js projects

## Configuration Requirements

1. **Configuration File Format**
   - ALWAYS use `next.config.js` or `next.config.mjs`
   - NEVER use `next.config.ts` - Next.js does not support TypeScript for configuration
   - Use JSDoc comments for type hints if needed:
     ```js
     /** @type {import('next').NextConfig} */
     const nextConfig = {
       // config options here
     };
     ```

2. **Version Compatibility**
   - React version must be compatible with Next.js version
   - For Next.js 14.x:
     - Use React 18.x
     - Use React DOM 18.x
     - Use TypeScript 5.x
     - Use Node.js 18.17 or later

3. **Package.json Configuration**
   ```json
   {
     "dependencies": {
       "next": "^14.0.0",
       "react": "^18.2.0",
       "react-dom": "^18.2.0"
     },
     "devDependencies": {
       "@types/react": "^18",
       "@types/react-dom": "^18",
       "typescript": "^5"
     }
   }
   ```

## Development Server

1. **Starting Development Server**
   - Default command: `next dev`
   - Avoid using experimental features like Turbopack unless specifically needed
   - Default port is 3000, can be changed with `--port`

2. **Common Issues**
   - Configuration file must be JavaScript (`.js` or `.mjs`)
   - React version mismatches can cause runtime errors
   - TypeScript configuration belongs in `tsconfig.json`, not `next.config.ts`

## Project Structure

1. **Required Files**
   - `next.config.js` - Project configuration
   - `tsconfig.json` - TypeScript configuration
   - `package.json` - Dependencies and scripts
   - `postcss.config.js` - PostCSS configuration (if using Tailwind)
   - `tailwind.config.js` - Tailwind configuration (if using Tailwind)

2. **Directory Structure**
   ```
   src/
   ├── app/          # App Router files
   ├── components/   # React components
   ├── lib/          # Utility functions
   ├── styles/       # CSS files
   └── types/        # TypeScript types
   ```

## Dependencies Management

1. **Core Dependencies**
   - Keep Next.js and React versions in sync
   - Use stable versions for production
   - Lock versions in package.json for consistency

2. **Development Dependencies**
   - Include necessary TypeScript types
   - Include ESLint and its configurations
   - Include PostCSS and Autoprefixer if using Tailwind

## Error Prevention

1. **Common Setup Errors**
   - Using TypeScript for Next.js configuration
   - Mismatched React and Next.js versions
   - Missing peer dependencies
   - Incorrect import aliases

2. **Best Practices**
   - Always use the App Router for new projects
   - Configure import aliases in both `tsconfig.json` and `next.config.js`
   - Keep dependencies up to date but stable
   - Test in development mode before building for production

## Performance Considerations

1. **Development Mode**
   - Use default development server unless specific needs
   - Monitor for compilation warnings
   - Check for type errors before deployment

2. **Production Mode**
   - Always run `next build` before deploying
   - Test production builds locally with `next start`
   - Verify all static optimizations are working

## Deployment Checklist

1. **Pre-deployment**
   - Verify all configurations are in correct format
   - Check for TypeScript errors
   - Run production build locally
   - Test all environment variables

2. **Environment Variables**
   - Use `.env.local` for local development
   - Never commit `.env` files
   - Document required environment variables
   - Use appropriate environment files (`.env.production`, `.env.development`)